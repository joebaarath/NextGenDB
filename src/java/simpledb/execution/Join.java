package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate predicate;
    private OpIterator[] children;
    private Tuple next;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *               The predicate to use to join the children
     * @param child1
     *               Iterator for the left(outer) relation to join
     * @param child2
     *               Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.predicate = p;
        this.setChildren(new OpIterator[] { child1, child2 });
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return null;
    }

    /**
     * @return
     *         the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // some code goes here
        return children[0].getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *         the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // some code goes here
        return children[1].getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc t1 = children[0].getTupleDesc();
        TupleDesc t2 = children[1].getTupleDesc();
        return TupleDesc.merge(t1, t2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        children[0].open();
        children[1].open();
        loadNextTuple(children[0]);
    }

    public void close() {
        // some code goes here
        super.close();
        children[0].close();
        children[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        children[0].rewind();
        children[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        do {
            Tuple t1 = this.next;
            while (children[1].hasNext()) {
                Tuple t2 = children[1].next();
                if (predicate.filter(t1, t2)) {
                    Tuple t = new Tuple(getTupleDesc());
                    int i = 0;
                    for (; i < t1.getTupleDesc().numFields(); i++) {
                        t.setField(i, t1.getField(i));
                    }
                    for (int j = 0; j < t2.getTupleDesc().numFields(); j++) {
                        t.setField(i + j, t2.getField(j));
                    }
                    return t;
                }
            }
            children[1].rewind();
        } while (loadNextTuple(children[0]));

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return this.children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.children = children;
    }

    private boolean loadNextTuple(OpIterator child)
            throws TransactionAbortedException, DbException {
        if (child.hasNext()) {
            this.next = child.next();
            return true;
        } else {
            return false;
        }
    }
}
